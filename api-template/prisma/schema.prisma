// schema.prisma

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

generator client {
  provider = "prisma-client-js"
}

model Component {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  page      Page?   @relation(fields: [id], references: [id])
  authorId  String?
  index     String
  type      String
}

model Page {
  id         String      @id @default(cuid())
  path       String
  index      String
  exact      Boolean     @default(false)
  title      String
  content    String?
  published  Boolean     @default(false)
  app        App?        @relation(fields: [id], references: [id])
  authorId   String?
  components Component[]
}

model TableData {
  id       String  @id @default(cuid())
  row      Row?    @relation(fields: [rowId], references: [id])
  rowId    String?
  Column   Column? @relation(fields: [columnId], references: [id])
  columnId String?
  data     String?
}

model Row {
  id        String      @id @default(cuid())
  table     Table?      @relation(fields: [tableId], references: [id])
  tableId   String?
  tableData TableData[]
}

model Column {
  id        String      @id @default(cuid())
  table     Table?      @relation(fields: [tableId], references: [id])
  tableId   String?
  key       String
  tableData TableData[]
}

model Table {
  id              String         @id @default(cuid())
  resourceGroup   ResourceGroup? @relation(fields: [resourceGroupId], references: [id])
  resourceGroupId String?
  columns         Column[]
  rows            Row[]
  name            String?
  description     String?
}

model Image {
  id              String         @id @default(cuid())
  url             String?
  isDeleted       Boolean        @default(false)
  resourceGroup   ResourceGroup? @relation(fields: [resourceGroupId], references: [id])
  resourceGroupId String?
}

model ResourceGroup {
  id          String  @id @default(cuid())
  images      Image[]
  tables      Table[]
  tag         String?
  App         App?    @relation(fields: [appId], references: [id])
  appId       String?
  deleted     Boolean @default(false)
  description String?
  name        String?
}

model App {
  id                        String          @id @default(cuid())
  title                     String?
  name                      String?
  description               String?
  meta                      String?
  favicon                   String?
  image                     String?
  password                  String?
  passwordProtectionMessage String?
  type                      String?
  published                 Boolean         @default(false)
  author                    User?           @relation(fields: [authorId], references: [id])
  authorId                  String?
  pages                     Page[]
  resourceGroup             ResourceGroup[]
  draft                     String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  apps          App[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
